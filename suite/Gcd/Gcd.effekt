import args 

def list_max(l:List[Int]) : Int = {
  l match{
    case Nil() => panic("Empty List")
    case Cons(x,Nil()) => x
    case Cons(x,Cons(y,ys)) => 
      if (x>y) { 
        list_max(Cons(x,ys))
      }else{
        list_max(Cons(y,ys))
      }
  }
}

def enum_from_to(from:Int,to:Int) : List[Int] = {
  if (from<=to){
    Cons(from,enum_from_to(from + 1, to))
  }else{
    Nil()
  }
}

def quot_rem(a:Int,b:Int): (Int,Int) = {
  (a / b, mod(a,b))
}

def g(u1u2u3:(Int,Int,Int),v1v2v3: (Int,Int,Int)) : (Int,Int,Int) ={
  (u1u2u3,v1v2v3) match{
    case ((u1,u2,u3),(v1,v2,v3)) => 
      if (v3==0){
        (u3,u1,u2)
      }else {
        val (q,r) = quot_rem(u3,v3)
        g((v1,v2,v3),(u1 - (q * v1), u2 - (q * v2), r))
      }
  }
}

def gcd_e(x:Int,y:Int) : (Int,Int,Int) = {
  if (x==0){
    (y,0,1)
  }else{
    g((1,0,x),(0,1,y))
  }
}

def test_lscomp2(p2:List[Int],t1:List[Int],ms:List[Int],h1:Int) : List[(Int,Int)] = {
  p2 match{
    case Nil() => test_lscomp1(t1,ms)
    case Cons(h2,t2) => Cons((h1,h2),test_lscomp2(t2,t1,ms,h1))
  }
}

def test_lscomp1(p1:List[Int],ms:List[Int]) : List[(Int,Int)] = {
  p1 match{
    case Nil() => Nil()
    case Cons(h1,t1) => test_lscomp2(ms,t1,ms,h1)
  }
}

def test(d:Int) : Int = {
  val ns = enum_from_to(5000,5000 + d)
  val ms = enum_from_to(10000,10000 + d)
  val tripls = list::map(test_lscomp1(ns,ms)) { p => p match { case (x,y) => (x,y,gcd_e(x,y)) } }
  val rs = list::map(tripls) { trip => trip match{ case (d1,d2,(gg,u,v)) => abs((gg + u) + v) } }
  list_max(rs)
}

def test_gcd_nofib(x:Int) : Int = {
  test(x)
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = test_gcd_nofib(n)
  if (iters==1){
    println(res)
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      main_loop(iters,n)
    case _ => panic("Please provide arguments \"iters\",\"n\"")
  }
}
