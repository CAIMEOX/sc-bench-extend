import args 

def enum_from_to(from:Int,to:Int) : List[Int] = { 
  if (from<=to){
    Cons(from,enum_from_to(from + 1,to))
  }else{
    Nil()
  }
}

def filter[A](ls:List[A]) { f : A => Bool } : List[A] = { 
  ls match{
    case Nil() => Nil()
    case Cons(a,as) => 
      if (f(a)) {
        Cons(a,filter(as) {f})
      }else{
        filter(as) {f} 
      }
  }
}

def expand(a:Int,b:Int,c:Int,d:Int,e:Int,f:Int) : Int = {
  f + (e * 10) + (d * 100) + (c * 1000) + (b * 10000) + (a * 100000)
}

def condition(thirywelvn:List[Int]) : Bool = {
  thirywelvn match{
    case Cons(t,Cons(h,Cons(i,Cons(r,Cons(y,Cons(w,Cons(e,Cons(l,Cons(v,Cons(n,Nil())))))))))) => 
      (expand(t,h,i,r,t,y) + (5 * expand(t,w,e,l,v,e))) == expand(n,i,n,e,t,y)
    case _ => panic("Wrong number of elements")
  }
}

def add_lscomp(p1:List[List[Int]],k:Int): List[List[Int]] = { 
  p1 match{
    case Nil() => Nil()
    case Cons(h1,t1) => Cons(Cons(k,h1),add_lscomp(t1,k))
  }
}

def addj(j:Int,ls:List[Int]) : List[List[Int]] = {
  ls match{
    case Nil() => Cons(Cons(j,Nil()),Nil())
    case Cons(k,ks) => Cons(Cons(j,Cons(k,ks)),add_lscomp(addj(j,ks),k))
  }
}

def perm_lscomp2(p2:List[List[Int]],t1:List[List[Int]],j:Int) : List[List[Int]] = {
  p2 match{
    case Nil() => perm_lscomp1(t1,j)
    case Cons(r,t2) => Cons(r,perm_lscomp2(t2,t1,j))
  }
}

def perm_lscomp1(p1:List[List[Int]],j:Int) : List[List[Int]] = { 
  p1 match {
    case Nil() => Nil()
    case Cons(pjs,t1) => perm_lscomp2(addj(j,pjs),t1,j)
  }
}

def permutations(ls:List[Int]) : List[List[Int]] = {
  ls match {
    case Nil() => Cons(Nil(),Nil())
    case Cons(j,js) => perm_lscomp1(permutations(js),j)
  }
}

def test_cryptarithm_nofib(n:Int) : List[List[List[Int]]] = {
  list::map(enum_from_to(1,n)) { i => 
    val p0 = list::take(enum_from_to(0,9 + i),10)
    filter(permutations(p0)) { l => condition(l) }
  }
}

def first(l:List[List[List[Int]]]) : Int = {
  l match {
    case Cons(Cons(Cons(i,_),_),_) => i
    case _ => panic("Empty List")
  }
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = test_cryptarithm_nofib(n)
  if (iters==1){
    println(first(res))
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match {
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      main_loop(iters,n)
    case _ => panic("Please provide arguments \"iters\",\"n\"")
  }
}
