import args 

interface Ret{
  def ret(i:Int) : Int 
}

def tak(x:Int,y:Int,z:Int) : Int / Ret = {
  if (y<x) {
    tak(
      (try { tak(x - 1, y, z) } with Ret { def ret(i) = { i } }),
      (try { tak(y - 1, z, x) } with Ret { def ret(i) = { i } }),
      (try { tak(z - 1, x, y) } with Ret { def ret(i) = { i } })
      )
  }else{
    do ret(z)
  }
}

def main_loop(iters:Int,x:Int,y:Int,z:Int) : Unit = {
  val res = try { tak(x,y,z) } with Ret { def ret(i) = { i } } 
  if (iters==1){
    println(res)
  }else{
    main_loop(iters - 1,x,y,z)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(x_str,Cons(y_str,Cons(z_str,Nil())))) =>
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } } 
      val x = try { string::toInt(x_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } } 
      val y = try { string::toInt(y_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } } 
      val z = try { string::toInt(z_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } } 
      main_loop(iters,x,y,z)
    case _ => panic("Expected Arguments \"iters\",\"x\",\"y\",\"z\"")
  }
}
