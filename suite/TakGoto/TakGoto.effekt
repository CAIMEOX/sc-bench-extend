import args

effect goto(i: Int): Int

def tak(x: Int, y: Int, z: Int): Int / goto =
  if (y < x) {
    tak(
      (try { tak(x - 1, y, z) } with goto { i => i }),
      (try { tak(y - 1, z, x) } with goto { i => i }),
      (try { tak(z - 1, x, y) } with goto { i => i })
    )
  } else {
    do goto(z)
  }

def main_loop(iters: Int, x: Int, y: Int, z: Int): Unit = {
  val res = try { tak(x, y, z) } with goto { i => i }
  if (iters == 1) {
    println(res)
  } else {
    main_loop(iters - 1, x, y, z)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(x_str, Cons(y_str, Cons(z_str, Nil())))) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val x = string::toInt(x_str)
      val y = string::toInt(y_str)
      val z = string::toInt(z_str)
      main_loop(iters, x, y, z)
    case _ => panic("Expected Arguments \"iters\", \"x\", \"y\", \"z\"")
  }
