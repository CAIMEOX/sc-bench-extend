import args

def sum(start: Int, stop: Int) { f: Int => Int }: Int = {
  def sum_loop(i: Int, tot: Int, stop: Int): Int = {
    if (stop < i) {
      tot
    } else {
      sum_loop(i + 1, f(i) + tot, stop)
    }
  }
  sum_loop(start, 0, stop)
}

def motz(n: Int): Int = {
  if (n <= 1) {
    1
  } else {
    val limit = n - 2
    def product(i: Int): Int = {
      motz(i) * motz(limit - i)
    }
    motz(n - 1) + sum(0, limit) { product }
  }
}

def main_loop(iters: Int, n: Int): Unit = {
  val res = motz(n)
  if (iters == 1) {
    println(res)
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\", \"n\"")
  }
