import args 

interface Ret {
  def ret(i:Int) : Int
}

def ack(m:Int,n:Int) : Int / { Ret } = {
  if (m==0){
    do ret(n + 1)
  }else if (n==0){
    ack(m - 1, 1)
  }else{
    ack(m - 1,
      (try { ack(m,n - 1) } with Ret { def ret(i) = { i } })
    )
  }
}

def main_loop(iters:Int,m:Int,n:Int) : Unit = {
  val res = try { ack(m,n) } with Ret { def ret(i) = { i } }
  if (iters == 1) {
    println(res)
  }else{
    main_loop(iters - 1,m,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(m_str,Cons(n_str,Nil()))) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      val m = try { string::toInt(m_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      main_loop(iters,m,n)
    case _ => panic("Expected Arguments \"iters\",\"m\",\"n\"")
  }
}
