import args

def length[A](l: List[A]): Int =
  l match {
    case Nil() => 0
    case Cons(_, as) => 1 + length(as)
  }

def interval_list(m: Int, n: Int): List[Int] =
  if (n < m) {
    Nil()
  } else {
    Cons(m, interval_list(m + 1, n))
  }

def remove_multiples(n: Int, l: List[Int]): List[Int] =
  l match {
    case Nil() => Nil()
    case Cons(x, xs) => if (mod(x, n) == 0) {
      remove_multiples(n, xs)
    } else {
      Cons(x, remove_multiples(n, xs))
    }
  }

def sieve(l: List[Int]): List[Int] =
  l match {
    case Nil() => Nil()
    case Cons(x, xs) => Cons(x, sieve(remove_multiples(x, xs)))
  }

def main_loop(iters: Int, n: Int): Unit = {
  val res = sieve(interval_list(2, n))
  if (iters == 1) {
    println(length(res))
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\", \"n\"")
  }
