import args 

def useless(i:Int,n:Int,b:List[Int]) : Int = {
  if (i<n) {
    useless(i + 1,n, replicate(0,i,Nil()))
  }else{
    i
  }
}

def replicate(v:Int,n:Int,a:List[Int]) : List[Int] ={
  if (n==0){
    a
  }else{
    replicate(v,n - 1,Cons(v,a))
  }
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = useless(0,n,Nil())
  if (iters==1){
    println(res)
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }}
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }}
      main_loop(iters,n)
    case _ => panic("Please provide arguments \"iters\",\"n\"")
  }
}
