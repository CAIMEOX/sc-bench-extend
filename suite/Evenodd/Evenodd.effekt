import args

def not(b: Bool): Bool =
  if (b) false else true

def abs_i(n: Int): Int =
  if (n < 0) -1 * n else n

def even_abs(n: Int): Bool =
  if (n == 0) true else odd_abs(n - 1)

def odd_abs(n: Int): Bool =
  if (n == 0) false else even_abs(n - 1)

def even(n: Int): Bool =
  even_abs(abs_i(n))

def odd(n: Int): Bool =
  odd_abs(abs_i(n))

def main_loop(iters: Int, n: Int): Unit = {
  val res = even(n) && not(odd(n))
  if (iters == 1) {
    if (res) {
      println("1")
    } else {
      println("0")
    }
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\" and \"n\"")
  }
