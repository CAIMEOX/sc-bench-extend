import args

def odd_abs(n:Int) : Bool = {
  if (n==0) { 
    false
  }else{
    even_abs(n - 1)
  }
}

def even_abs(n:Int) : Bool = {
  if (n==0){
    true
  }else{
    odd_abs(n - 1)
  }
}

def even(n:Int) : Bool = {
  even_abs(abs(n))
}

def odd(n:Int) : Bool = {
  odd_abs(abs(n))
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = even(n) && not(odd(n))
  if (iters==1){
    if (res){
      println("1")
    }else{
      println("0")
    }
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) } }
      main_loop(iters,n) 
    case _ => panic("Please provide arguments \"iters\",\"n\"")
  }
}
