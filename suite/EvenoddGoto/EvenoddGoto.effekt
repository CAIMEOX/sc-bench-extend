import args

effect goto(i: Bool): Bool

def abs_i(n: Int): Int =
  if (n < 0) -1 * n else n

def even_abs(i: Int): Bool =
  if (i == 0) {
    true
  } else {
    try { odd_abs(i - 1) } with goto { b => b }
  }

def odd_abs(i: Int): Bool / goto =
  if (i == 0) {
    do goto(false)
  } else {
    do goto (even_abs(i - 1))
  }

def even(i: Int): Bool =
  even_abs(abs_i(i))

def odd(i: Int): Bool =
  try { odd_abs(abs_i(i)) } with goto { b => b }

def main_loop(iters: Int, n: Int): Unit = {
  val res = even(n) && not(odd(n))
  if (iters == 1) {
    if (res) { println("1") } else { println("0") }
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\" and \"n\"")
  }
