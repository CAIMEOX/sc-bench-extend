import args 

interface Ret{
  def ret(i:Bool): Bool 
}

def even_abs(i:Int) : Bool = {
  if (i==0){
    true
  }else{
    try { odd_abs(i - 1) } with Ret { def ret(b) = { b }}
  }
}

def odd_abs(i:Int) : Bool / {Ret} = {
  if (i==0){
    do ret(false)
  }else{
    do ret (even_abs(i - 1))
  }
}

def even(i:Int) : Bool = {
  even_abs(abs(i))
}

def odd(i:Int) : Bool = {
  try { odd_abs(abs(i)) } with Ret { def ret(b) = { b }}
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = even(n) && not(odd(n))
  if (iters==1) {
    if (res) { println("1") } else { println("0") }
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }} 
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }} 
      main_loop(iters,n)
    case _ => panic("Expected arguments \"iters\",\"n\"")
  }
}
