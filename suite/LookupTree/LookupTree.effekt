import args

type Tree[A] {
  Leaf(x: A)
  Node(left: Tree[A], right: Tree[A])
}

def create(i: Int, n: Int): Tree[Int] =
  if (i < n) {
    val t = create(i + 1, n)
    Node(t, t)
  } else {
    Leaf(n)
  }

def lookup(t: Tree[Int]): Int =
  t match {
    case Leaf(v) => v
    case Node(left, _) => lookup(left)
  }

def main_loop(iters: Int, n: Int): Unit = {
  val res = lookup(create(0, n))
  if (iters == 1) {
    println(res)
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\", \"n\"")
  }