import args 

def tfib(n:Int,a:Int,b:Int): Int = {
  if (n==0){
    a
  }else{
    tfib(n - 1,a + b, a)
  }
}

def fib(n:Int): Int = {
  tfib(n,0,1)
}

def main_loop(iters:Int,n:Int) : Unit = {
  val res = fib(n)
  if (iters==1) {
    println(res)
  }else{
    main_loop(iters - 1,n)
  }
}

def main() : Unit = {
  commandLineArgs() match{
    case Cons(iters_str,Cons(n_str,Nil())) => 
      val iters = try { string::toInt(iters_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }}
      val n = try { string::toInt(n_str) } with Exception[WrongFormat] { def raise(_,msg) = { panic(msg) }}
      main_loop(iters,n)
    case _ => panic("Expected Arguments \"iters\",\"n\"")
  }
}
