import args

def create_n(n: Int): List[Unit] =
  if (n == 0) Nil()
  else Cons((), create_n(n - 1))

def len(l: List[Unit]): Int =
  l match {
    case Nil() => 0
    case Cons(_, xs) => 1 + len(xs)
  }

def rec_div2(l: List[Unit]): List[Unit] =
  l match {
    case Nil() => Nil()
    case Cons(x, Cons(y, ys)) => Cons(x, rec_div2(ys))
    case _ => Nil() // panic("Odd length List")
  }

def main_loop(iters: Int, n: Int): Unit = {
  val res = len(rec_div2(create_n(n)))
  if (iters == 1) {
    println(res)
  } else {
    main_loop(iters - 1, n)
  }
}

def main() =
  commandLineArgs() match {
    case Cons(iters_str, Cons(n_str, Nil())) =>
      with on[WrongFormat].panic
      val iters = string::toInt(iters_str)
      val n = string::toInt(n_str)
      main_loop(iters, n)
    case _ => panic("Expected Arguments \"iters\" and \"n\"")
  }
